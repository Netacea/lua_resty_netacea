worker_processes 1;

events {
  worker_connections 1024;
}

http {
  lua_package_path "/usr/local/share/lua/5.1/?.lua;;";
  lua_max_running_timers  2048;
  lua_max_pending_timers  4096;
  lua_socket_pool_size    1024;
  
  lua_need_request_body on;
  resolver 8.8.8.8 ipv6=off;
  lua_ssl_verify_depth 2;
  lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt;
  init_worker_by_lua_block {
    -- create all shared resources by netacea module, like: timers, semaphores and etc.
    netacea = (require 'lua_resty_netacea'):new()
  }

  -- we can have many server blocks as needed
  server {
    listen 80;
    server_name localhost;
    
    set $namespace "my-custom-name-space-1"
      
    location / {
      default_type text/html;
      content_by_lua 'ngx.say("<p>hello, world</p>")';
    }
    
    log_by_lua_block {
      -- create or get a netacea client based on provided namespace
      local netacea_client = netacea:client(ngx.var.namespace,{
        ingestEndpoint     = '',
        mitigationEndpoint = '',
        apiKey             = '',
        secretKey          = '',
        realIpHeader       = '',
        ingestEnabled      = false,
        mitigationEnabled  = false,
        mitigationType     = ''
      })

      netacea_client:ingest()
    }
    access_by_lua_block {
      -- create or get a netacea client based on provided namespace
      local netacea_client = netacea:client(ngx.var.namespace,{
        ingestEndpoint     = '',
        mitigationEndpoint = '',
        apiKey             = '',
        secretKey          = '',
        realIpHeader       = '',
        ingestEnabled      = false,
        mitigationEnabled  = false,
        mitigationType     = ''
      })    
      netacea_client:mitigate()
    }
  }
}
